'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dtsBookss
    Inherits DataSet
    
    Private tabletblBooks As tblBooksDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("tblBooks")) Is Nothing) Then
                Me.Tables.Add(New tblBooksDataTable(ds.Tables("tblBooks")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblBooks As tblBooksDataTable
        Get
            Return Me.tabletblBooks
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dtsBookss = CType(MyBase.Clone,dtsBookss)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("tblBooks")) Is Nothing) Then
            Me.Tables.Add(New tblBooksDataTable(ds.Tables("tblBooks")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tabletblBooks = CType(Me.Tables("tblBooks"),tblBooksDataTable)
        If (Not (Me.tabletblBooks) Is Nothing) Then
            Me.tabletblBooks.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dtsBookss"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/dtsBookss.xsd"
        Me.Locale = New System.Globalization.CultureInfo("el-GR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tabletblBooks = New tblBooksDataTable
        Me.Tables.Add(Me.tabletblBooks)
    End Sub
    
    Private Function ShouldSerializetblBooks() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub tblBooksRowChangeEventHandler(ByVal sender As Object, ByVal e As tblBooksRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblBooksDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnaa As DataColumn
        
        Private columnauthor As DataColumn
        
        Private columnbookcode As DataColumn
        
        Private columnbookordernumber As DataColumn
        
        Private columnbooktitle As DataColumn
        
        Private columncompocategory As DataColumn
        
        Private columncomposer As DataColumn
        
        Private columncompotitle As DataColumn
        
        Private columnedition As DataColumn
        
        Private columnepimelitis As DataColumn
        
        Private columnfpa As DataColumn
        
        Private columngeneralcode As DataColumn
        
        Private columngeneralcompotitle As DataColumn
        
        Private columnISBN As DataColumn
        
        Private columnISMN As DataColumn
        
        Private columnnotes As DataColumn
        
        Private columnorders As DataColumn
        
        Private columnquantity As DataColumn
        
        Private columnsubcompocategory As DataColumn
        
        Private columnsubcompocategory2 As DataColumn
        
        Private columnsupplier As DataColumn
        
        Private columntimiagoras As DataColumn
        
        Private columntimipolisis As DataColumn
        
        Private columnΠρομηθευτής2 As DataColumn
        
        Private columnΠρομηθευτής3 As DataColumn
        
        Friend Sub New()
            MyBase.New("tblBooks")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property aaColumn As DataColumn
            Get
                Return Me.columnaa
            End Get
        End Property
        
        Friend ReadOnly Property authorColumn As DataColumn
            Get
                Return Me.columnauthor
            End Get
        End Property
        
        Friend ReadOnly Property bookcodeColumn As DataColumn
            Get
                Return Me.columnbookcode
            End Get
        End Property
        
        Friend ReadOnly Property bookordernumberColumn As DataColumn
            Get
                Return Me.columnbookordernumber
            End Get
        End Property
        
        Friend ReadOnly Property booktitleColumn As DataColumn
            Get
                Return Me.columnbooktitle
            End Get
        End Property
        
        Friend ReadOnly Property compocategoryColumn As DataColumn
            Get
                Return Me.columncompocategory
            End Get
        End Property
        
        Friend ReadOnly Property composerColumn As DataColumn
            Get
                Return Me.columncomposer
            End Get
        End Property
        
        Friend ReadOnly Property compotitleColumn As DataColumn
            Get
                Return Me.columncompotitle
            End Get
        End Property
        
        Friend ReadOnly Property editionColumn As DataColumn
            Get
                Return Me.columnedition
            End Get
        End Property
        
        Friend ReadOnly Property epimelitisColumn As DataColumn
            Get
                Return Me.columnepimelitis
            End Get
        End Property
        
        Friend ReadOnly Property fpaColumn As DataColumn
            Get
                Return Me.columnfpa
            End Get
        End Property
        
        Friend ReadOnly Property generalcodeColumn As DataColumn
            Get
                Return Me.columngeneralcode
            End Get
        End Property
        
        Friend ReadOnly Property generalcompotitleColumn As DataColumn
            Get
                Return Me.columngeneralcompotitle
            End Get
        End Property
        
        Friend ReadOnly Property ISBNColumn As DataColumn
            Get
                Return Me.columnISBN
            End Get
        End Property
        
        Friend ReadOnly Property ISMNColumn As DataColumn
            Get
                Return Me.columnISMN
            End Get
        End Property
        
        Friend ReadOnly Property notesColumn As DataColumn
            Get
                Return Me.columnnotes
            End Get
        End Property
        
        Friend ReadOnly Property ordersColumn As DataColumn
            Get
                Return Me.columnorders
            End Get
        End Property
        
        Friend ReadOnly Property quantityColumn As DataColumn
            Get
                Return Me.columnquantity
            End Get
        End Property
        
        Friend ReadOnly Property subcompocategoryColumn As DataColumn
            Get
                Return Me.columnsubcompocategory
            End Get
        End Property
        
        Friend ReadOnly Property subcompocategory2Column As DataColumn
            Get
                Return Me.columnsubcompocategory2
            End Get
        End Property
        
        Friend ReadOnly Property supplierColumn As DataColumn
            Get
                Return Me.columnsupplier
            End Get
        End Property
        
        Friend ReadOnly Property timiagorasColumn As DataColumn
            Get
                Return Me.columntimiagoras
            End Get
        End Property
        
        Friend ReadOnly Property timipolisisColumn As DataColumn
            Get
                Return Me.columntimipolisis
            End Get
        End Property
        
        Friend ReadOnly Property Προμηθευτής2Column As DataColumn
            Get
                Return Me.columnΠρομηθευτής2
            End Get
        End Property
        
        Friend ReadOnly Property Προμηθευτής3Column As DataColumn
            Get
                Return Me.columnΠρομηθευτής3
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblBooksRow
            Get
                Return CType(Me.Rows(index),tblBooksRow)
            End Get
        End Property
        
        Public Event tblBooksRowChanged As tblBooksRowChangeEventHandler
        
        Public Event tblBooksRowChanging As tblBooksRowChangeEventHandler
        
        Public Event tblBooksRowDeleted As tblBooksRowChangeEventHandler
        
        Public Event tblBooksRowDeleting As tblBooksRowChangeEventHandler
        
        Public Overloads Sub AddtblBooksRow(ByVal row As tblBooksRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddtblBooksRow( _
                    ByVal author As String,  _
                    ByVal bookcode As String,  _
                    ByVal bookordernumber As String,  _
                    ByVal booktitle As String,  _
                    ByVal compocategory As String,  _
                    ByVal composer As String,  _
                    ByVal compotitle As String,  _
                    ByVal edition As String,  _
                    ByVal epimelitis As String,  _
                    ByVal fpa As String,  _
                    ByVal generalcode As String,  _
                    ByVal generalcompotitle As String,  _
                    ByVal ISBN As String,  _
                    ByVal ISMN As String,  _
                    ByVal notes As String,  _
                    ByVal orders As Integer,  _
                    ByVal quantity As Integer,  _
                    ByVal subcompocategory As String,  _
                    ByVal subcompocategory2 As String,  _
                    ByVal supplier As String,  _
                    ByVal timiagoras As String,  _
                    ByVal timipolisis As String,  _
                    ByVal Προμηθευτής2 As String,  _
                    ByVal Προμηθευτής3 As String) As tblBooksRow
            Dim rowtblBooksRow As tblBooksRow = CType(Me.NewRow,tblBooksRow)
            rowtblBooksRow.ItemArray = New Object() {Nothing, author, bookcode, bookordernumber, booktitle, compocategory, composer, compotitle, edition, epimelitis, fpa, generalcode, generalcompotitle, ISBN, ISMN, notes, orders, quantity, subcompocategory, subcompocategory2, supplier, timiagoras, timipolisis, Προμηθευτής2, Προμηθευτής3}
            Me.Rows.Add(rowtblBooksRow)
            Return rowtblBooksRow
        End Function
        
        Public Function FindByaageneralcode(ByVal aa As Integer, ByVal generalcode As String) As tblBooksRow
            Return CType(Me.Rows.Find(New Object() {aa, generalcode}),tblBooksRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As tblBooksDataTable = CType(MyBase.Clone,tblBooksDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New tblBooksDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnaa = Me.Columns("aa")
            Me.columnauthor = Me.Columns("author")
            Me.columnbookcode = Me.Columns("bookcode")
            Me.columnbookordernumber = Me.Columns("bookordernumber")
            Me.columnbooktitle = Me.Columns("booktitle")
            Me.columncompocategory = Me.Columns("compocategory")
            Me.columncomposer = Me.Columns("composer")
            Me.columncompotitle = Me.Columns("compotitle")
            Me.columnedition = Me.Columns("edition")
            Me.columnepimelitis = Me.Columns("epimelitis")
            Me.columnfpa = Me.Columns("fpa")
            Me.columngeneralcode = Me.Columns("generalcode")
            Me.columngeneralcompotitle = Me.Columns("generalcompotitle")
            Me.columnISBN = Me.Columns("ISBN")
            Me.columnISMN = Me.Columns("ISMN")
            Me.columnnotes = Me.Columns("notes")
            Me.columnorders = Me.Columns("orders")
            Me.columnquantity = Me.Columns("quantity")
            Me.columnsubcompocategory = Me.Columns("subcompocategory")
            Me.columnsubcompocategory2 = Me.Columns("subcompocategory2")
            Me.columnsupplier = Me.Columns("supplier")
            Me.columntimiagoras = Me.Columns("timiagoras")
            Me.columntimipolisis = Me.Columns("timipolisis")
            Me.columnΠρομηθευτής2 = Me.Columns("Προμηθευτής2")
            Me.columnΠρομηθευτής3 = Me.Columns("Προμηθευτής3")
        End Sub
        
        Private Sub InitClass()
            Me.columnaa = New DataColumn("aa", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaa)
            Me.columnauthor = New DataColumn("author", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnauthor)
            Me.columnbookcode = New DataColumn("bookcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbookcode)
            Me.columnbookordernumber = New DataColumn("bookordernumber", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbookordernumber)
            Me.columnbooktitle = New DataColumn("booktitle", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbooktitle)
            Me.columncompocategory = New DataColumn("compocategory", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncompocategory)
            Me.columncomposer = New DataColumn("composer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncomposer)
            Me.columncompotitle = New DataColumn("compotitle", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncompotitle)
            Me.columnedition = New DataColumn("edition", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnedition)
            Me.columnepimelitis = New DataColumn("epimelitis", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnepimelitis)
            Me.columnfpa = New DataColumn("fpa", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfpa)
            Me.columngeneralcode = New DataColumn("generalcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columngeneralcode)
            Me.columngeneralcompotitle = New DataColumn("generalcompotitle", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columngeneralcompotitle)
            Me.columnISBN = New DataColumn("ISBN", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnISBN)
            Me.columnISMN = New DataColumn("ISMN", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnISMN)
            Me.columnnotes = New DataColumn("notes", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnotes)
            Me.columnorders = New DataColumn("orders", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnorders)
            Me.columnquantity = New DataColumn("quantity", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnquantity)
            Me.columnsubcompocategory = New DataColumn("subcompocategory", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsubcompocategory)
            Me.columnsubcompocategory2 = New DataColumn("subcompocategory2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsubcompocategory2)
            Me.columnsupplier = New DataColumn("supplier", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsupplier)
            Me.columntimiagoras = New DataColumn("timiagoras", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntimiagoras)
            Me.columntimipolisis = New DataColumn("timipolisis", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntimipolisis)
            Me.columnΠρομηθευτής2 = New DataColumn("Προμηθευτής2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnΠρομηθευτής2)
            Me.columnΠρομηθευτής3 = New DataColumn("Προμηθευτής3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnΠρομηθευτής3)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnaa, Me.columngeneralcode}, true))
            Me.columnaa.AutoIncrement = true
            Me.columnaa.AllowDBNull = false
            Me.columngeneralcode.AllowDBNull = false
        End Sub
        
        Public Function NewtblBooksRow() As tblBooksRow
            Return CType(Me.NewRow,tblBooksRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New tblBooksRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tblBooksRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblBooksRowChangedEvent) Is Nothing) Then
                RaiseEvent tblBooksRowChanged(Me, New tblBooksRowChangeEvent(CType(e.Row,tblBooksRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblBooksRowChangingEvent) Is Nothing) Then
                RaiseEvent tblBooksRowChanging(Me, New tblBooksRowChangeEvent(CType(e.Row,tblBooksRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblBooksRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblBooksRowDeleted(Me, New tblBooksRowChangeEvent(CType(e.Row,tblBooksRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblBooksRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblBooksRowDeleting(Me, New tblBooksRowChangeEvent(CType(e.Row,tblBooksRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovetblBooksRow(ByVal row As tblBooksRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblBooksRow
        Inherits DataRow
        
        Private tabletblBooks As tblBooksDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblBooks = CType(Me.Table,tblBooksDataTable)
        End Sub
        
        Public Property aa As Integer
            Get
                Return CType(Me(Me.tabletblBooks.aaColumn),Integer)
            End Get
            Set
                Me(Me.tabletblBooks.aaColumn) = value
            End Set
        End Property
        
        Public Property author As String
            Get
                Try 
                    Return CType(Me(Me.tabletblBooks.authorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblBooks.authorColumn) = value
            End Set
        End Property
        
        Public Property bookcode As String
            Get
                Try 
                    Return CType(Me(Me.tabletblBooks.bookcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblBooks.bookcodeColumn) = value
            End Set
        End Property
        
        Public Property bookordernumber As String
            Get
                Try 
                    Return CType(Me(Me.tabletblBooks.bookordernumberColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblBooks.bookordernumberColumn) = value
            End Set
        End Property
        
        Public Property booktitle As String
            Get
                Try 
                    Return CType(Me(Me.tabletblBooks.booktitleColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblBooks.booktitleColumn) = value
            End Set
        End Property
        
        Public Property compocategory As String
            Get
                Try 
                    Return CType(Me(Me.tabletblBooks.compocategoryColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblBooks.compocategoryColumn) = value
            End Set
        End Property
        
        Public Property composer As String
            Get
                Try 
                    Return CType(Me(Me.tabletblBooks.composerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblBooks.composerColumn) = value
            End Set
        End Property
        
        Public Property compotitle As String
            Get
                Try 
                    Return CType(Me(Me.tabletblBooks.compotitleColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblBooks.compotitleColumn) = value
            End Set
        End Property
        
        Public Property edition As String
            Get
                Try 
                    Return CType(Me(Me.tabletblBooks.editionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblBooks.editionColumn) = value
            End Set
        End Property
        
        Public Property epimelitis As String
            Get
                Try 
                    Return CType(Me(Me.tabletblBooks.epimelitisColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblBooks.epimelitisColumn) = value
            End Set
        End Property
        
        Public Property fpa As String
            Get
                Try 
                    Return CType(Me(Me.tabletblBooks.fpaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblBooks.fpaColumn) = value
            End Set
        End Property
        
        Public Property generalcode As String
            Get
                Return CType(Me(Me.tabletblBooks.generalcodeColumn),String)
            End Get
            Set
                Me(Me.tabletblBooks.generalcodeColumn) = value
            End Set
        End Property
        
        Public Property generalcompotitle As String
            Get
                Try 
                    Return CType(Me(Me.tabletblBooks.generalcompotitleColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblBooks.generalcompotitleColumn) = value
            End Set
        End Property
        
        Public Property ISBN As String
            Get
                Try 
                    Return CType(Me(Me.tabletblBooks.ISBNColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblBooks.ISBNColumn) = value
            End Set
        End Property
        
        Public Property ISMN As String
            Get
                Try 
                    Return CType(Me(Me.tabletblBooks.ISMNColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblBooks.ISMNColumn) = value
            End Set
        End Property
        
        Public Property notes As String
            Get
                Try 
                    Return CType(Me(Me.tabletblBooks.notesColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblBooks.notesColumn) = value
            End Set
        End Property
        
        Public Property orders As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblBooks.ordersColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblBooks.ordersColumn) = value
            End Set
        End Property
        
        Public Property quantity As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblBooks.quantityColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblBooks.quantityColumn) = value
            End Set
        End Property
        
        Public Property subcompocategory As String
            Get
                Try 
                    Return CType(Me(Me.tabletblBooks.subcompocategoryColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblBooks.subcompocategoryColumn) = value
            End Set
        End Property
        
        Public Property subcompocategory2 As String
            Get
                Try 
                    Return CType(Me(Me.tabletblBooks.subcompocategory2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblBooks.subcompocategory2Column) = value
            End Set
        End Property
        
        Public Property supplier As String
            Get
                Try 
                    Return CType(Me(Me.tabletblBooks.supplierColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblBooks.supplierColumn) = value
            End Set
        End Property
        
        Public Property timiagoras As String
            Get
                Try 
                    Return CType(Me(Me.tabletblBooks.timiagorasColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblBooks.timiagorasColumn) = value
            End Set
        End Property
        
        Public Property timipolisis As String
            Get
                Try 
                    Return CType(Me(Me.tabletblBooks.timipolisisColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblBooks.timipolisisColumn) = value
            End Set
        End Property
        
        Public Property Προμηθευτής2 As String
            Get
                Try 
                    Return CType(Me(Me.tabletblBooks.Προμηθευτής2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblBooks.Προμηθευτής2Column) = value
            End Set
        End Property
        
        Public Property Προμηθευτής3 As String
            Get
                Try 
                    Return CType(Me(Me.tabletblBooks.Προμηθευτής3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblBooks.Προμηθευτής3Column) = value
            End Set
        End Property
        
        Public Function IsauthorNull() As Boolean
            Return Me.IsNull(Me.tabletblBooks.authorColumn)
        End Function
        
        Public Sub SetauthorNull()
            Me(Me.tabletblBooks.authorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsbookcodeNull() As Boolean
            Return Me.IsNull(Me.tabletblBooks.bookcodeColumn)
        End Function
        
        Public Sub SetbookcodeNull()
            Me(Me.tabletblBooks.bookcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsbookordernumberNull() As Boolean
            Return Me.IsNull(Me.tabletblBooks.bookordernumberColumn)
        End Function
        
        Public Sub SetbookordernumberNull()
            Me(Me.tabletblBooks.bookordernumberColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsbooktitleNull() As Boolean
            Return Me.IsNull(Me.tabletblBooks.booktitleColumn)
        End Function
        
        Public Sub SetbooktitleNull()
            Me(Me.tabletblBooks.booktitleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscompocategoryNull() As Boolean
            Return Me.IsNull(Me.tabletblBooks.compocategoryColumn)
        End Function
        
        Public Sub SetcompocategoryNull()
            Me(Me.tabletblBooks.compocategoryColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscomposerNull() As Boolean
            Return Me.IsNull(Me.tabletblBooks.composerColumn)
        End Function
        
        Public Sub SetcomposerNull()
            Me(Me.tabletblBooks.composerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscompotitleNull() As Boolean
            Return Me.IsNull(Me.tabletblBooks.compotitleColumn)
        End Function
        
        Public Sub SetcompotitleNull()
            Me(Me.tabletblBooks.compotitleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IseditionNull() As Boolean
            Return Me.IsNull(Me.tabletblBooks.editionColumn)
        End Function
        
        Public Sub SeteditionNull()
            Me(Me.tabletblBooks.editionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsepimelitisNull() As Boolean
            Return Me.IsNull(Me.tabletblBooks.epimelitisColumn)
        End Function
        
        Public Sub SetepimelitisNull()
            Me(Me.tabletblBooks.epimelitisColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfpaNull() As Boolean
            Return Me.IsNull(Me.tabletblBooks.fpaColumn)
        End Function
        
        Public Sub SetfpaNull()
            Me(Me.tabletblBooks.fpaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsgeneralcompotitleNull() As Boolean
            Return Me.IsNull(Me.tabletblBooks.generalcompotitleColumn)
        End Function
        
        Public Sub SetgeneralcompotitleNull()
            Me(Me.tabletblBooks.generalcompotitleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsISBNNull() As Boolean
            Return Me.IsNull(Me.tabletblBooks.ISBNColumn)
        End Function
        
        Public Sub SetISBNNull()
            Me(Me.tabletblBooks.ISBNColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsISMNNull() As Boolean
            Return Me.IsNull(Me.tabletblBooks.ISMNColumn)
        End Function
        
        Public Sub SetISMNNull()
            Me(Me.tabletblBooks.ISMNColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnotesNull() As Boolean
            Return Me.IsNull(Me.tabletblBooks.notesColumn)
        End Function
        
        Public Sub SetnotesNull()
            Me(Me.tabletblBooks.notesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsordersNull() As Boolean
            Return Me.IsNull(Me.tabletblBooks.ordersColumn)
        End Function
        
        Public Sub SetordersNull()
            Me(Me.tabletblBooks.ordersColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsquantityNull() As Boolean
            Return Me.IsNull(Me.tabletblBooks.quantityColumn)
        End Function
        
        Public Sub SetquantityNull()
            Me(Me.tabletblBooks.quantityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssubcompocategoryNull() As Boolean
            Return Me.IsNull(Me.tabletblBooks.subcompocategoryColumn)
        End Function
        
        Public Sub SetsubcompocategoryNull()
            Me(Me.tabletblBooks.subcompocategoryColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Issubcompocategory2Null() As Boolean
            Return Me.IsNull(Me.tabletblBooks.subcompocategory2Column)
        End Function
        
        Public Sub Setsubcompocategory2Null()
            Me(Me.tabletblBooks.subcompocategory2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IssupplierNull() As Boolean
            Return Me.IsNull(Me.tabletblBooks.supplierColumn)
        End Function
        
        Public Sub SetsupplierNull()
            Me(Me.tabletblBooks.supplierColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstimiagorasNull() As Boolean
            Return Me.IsNull(Me.tabletblBooks.timiagorasColumn)
        End Function
        
        Public Sub SettimiagorasNull()
            Me(Me.tabletblBooks.timiagorasColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstimipolisisNull() As Boolean
            Return Me.IsNull(Me.tabletblBooks.timipolisisColumn)
        End Function
        
        Public Sub SettimipolisisNull()
            Me(Me.tabletblBooks.timipolisisColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsΠρομηθευτής2Null() As Boolean
            Return Me.IsNull(Me.tabletblBooks.Προμηθευτής2Column)
        End Function
        
        Public Sub SetΠρομηθευτής2Null()
            Me(Me.tabletblBooks.Προμηθευτής2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsΠρομηθευτής3Null() As Boolean
            Return Me.IsNull(Me.tabletblBooks.Προμηθευτής3Column)
        End Function
        
        Public Sub SetΠρομηθευτής3Null()
            Me(Me.tabletblBooks.Προμηθευτής3Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblBooksRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As tblBooksRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As tblBooksRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As tblBooksRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
